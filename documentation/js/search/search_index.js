var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.176,1,2.202]],["body/classes/AllExceptionsFilter.html",[0,0.152,1,2.706,2,1.35,3,0.358,4,0.358,5,0.313,6,2.212,7,2.385,8,4.405,9,0.456,10,1.571,11,3.966,12,3.791,13,4.405,14,4.793,15,0.917,16,2.673,17,1.5,18,0.037,19,1.007,20,0.69,21,1.22,22,4.793,23,1.107,24,2.673,25,0.646,26,3.645,27,2.212,28,0.565,29,2.128,30,2.706,31,1.5,32,0.358,33,1.35,34,2.178,35,2.673,36,2.673,37,2.673,38,2.673,39,2.128,40,4.405,41,2.673,42,2.212,43,2.289,44,2.673,45,2.673,46,2.673,47,3.015,48,3.791,49,2.673,50,0.887,51,2.673,52,2.673,53,1.35,54,1.681,55,1.681,56,2.673,57,2.673,58,1.22,59,1.35,60,2.673,61,1.35,62,2.673,63,1.35,64,1.35,65,1.681,66,0.022,67,0.022]],["title/interfaces/ApiResponse.html",[68,1.278,69,1.731]],["body/interfaces/ApiResponse.html",[0,0.149,3,0.35,4,0.35,5,0.306,7,1.644,9,0.446,18,0.037,20,1.295,25,0.809,28,0.553,29,2.442,31,1.467,32,0.35,33,1.32,34,1.546,43,2.225,50,1.257,53,2.534,58,2.291,59,1.884,61,2.197,63,1.884,64,1.32,65,1.644,66,0.022,67,0.022,68,1.083,69,2.094,70,1.644,71,1.866,72,1.704,73,4.692,74,4.152,75,3.088,76,1.28,77,2.664,78,2.664,79,2.664,80,2.163,81,1.866,82,2.664,83,1.644,84,1.884,85,1.644,86,1.866,87,1.866,88,1.866,89,1.866,90,2.664,91,1.083,92,1.866,93,2.163,94,2.163,95,2.163,96,1.866]],["title/controllers/AppController.html",[97,1.557,98,1.94]],["body/controllers/AppController.html",[0,0.217,3,0.511,4,0.511,5,0.447,9,0.651,10,1.994,15,1.308,18,0.036,23,1.581,25,0.821,28,0.807,32,0.511,50,1.126,66,0.028,67,0.028,91,1.581,97,2.43,98,3.027,99,2.141,100,3.157,101,4.581,102,2.4,103,3.815,104,2.662,105,3.157,106,3.157,107,2.723,108,3.815]],["title/modules/AppModule.html",[109,0.963,110,1.94]],["body/modules/AppModule.html",[0,0.184,3,0.433,4,0.433,5,0.379,18,0.036,25,0.924,28,0.684,32,0.433,66,0.025,67,0.025,98,3.063,99,2.427,104,2.814,105,2.677,109,1.521,110,3.722,111,1.34,112,1.633,113,2.035,114,2.035,115,1.633,116,3.063,117,2.035,118,2.677,119,2.677,120,2.677,121,3.129,122,3.129,123,2.72,124,2.035,125,2.035,126,3.235,127,2.427,128,3.235,129,3.235,130,3.235]],["title/injectables/AppService.html",[76,1.058,104,1.557]],["body/injectables/AppService.html",[0,0.229,3,0.538,4,0.538,5,0.471,9,0.685,10,2.06,15,1.378,18,0.036,23,1.665,25,0.685,28,0.85,32,0.538,50,1.163,66,0.029,67,0.029,76,1.705,91,1.665,101,4.667,104,2.51,131,2.255,132,3.325,133,4.018,134,4.018,135,4.018]],["title/modules/CommonModule.html",[109,0.963,121,1.731]],["body/modules/CommonModule.html",[0,0.189,3,0.444,4,0.444,5,0.388,18,0.036,25,0.84,28,0.701,32,0.444,66,0.026,67,0.026,109,1.539,111,1.373,112,1.673,113,2.084,114,2.084,115,1.673,116,2.084,117,3.1,121,3.335,123,2.763,124,2.084,125,2.084,127,2.465,136,2.741,137,2.741,138,2.741,139,3.385,140,3.385,141,3.313,142,3.313,143,3.313]],["title/modules/ConfigModule.html",[109,0.963,139,1.731]],["body/modules/ConfigModule.html",[0,0.225,3,0.531,4,0.531,5,0.464,18,0.036,25,0.84,28,0.838,32,0.66,34,1.641,50,0.927,66,0.029,67,0.029,84,2,109,1.538,111,1.641,127,2.223,139,3.01,144,2.827,145,3.96,146,2.827,147,3.517,148,3.277,149,3.96,150,3.96,151,3.96]],["title/classes/CreatePatientDto.html",[0,0.176,152,1.408]],["body/classes/CreatePatientDto.html",[0,0.253,2,1.707,3,0.453,4,0.453,5,0.396,9,0.576,15,1.707,18,0.036,19,1.875,20,1.285,25,0.576,32,0.453,50,1.238,66,0.026,67,0.026,72,2.032,84,2.247,102,3.131,152,2.032,153,4.377,154,2.126,155,3.553,156,3.553,157,2.247,158,3.38,159,3.38,160,5.289,161,3.38,162,3.38,163,3.38,164,4.451,165,4.451,166,4.451,167,3.38,168,2.797,169,3.38,170,3.38]],["title/interfaces/CustomError.html",[68,1.278,171,1.731]],["body/interfaces/CustomError.html",[3,0.466,4,0.466,5,0.407,9,0.593,18,0.036,20,1.171,21,2.442,32,0.608,39,3.114,43,1.442,47,3.175,50,1.39,53,1.757,55,3.49,58,1.589,59,1.757,61,1.757,63,2.29,66,0.027,67,0.027,68,1.88,70,2.189,72,2.071,157,2.701,171,2.546,172,2.484,173,3.239,174,1.953,175,2.484]],["title/injectables/ErrorInterceptor.html",[76,1.058,176,2.202]],["body/injectables/ErrorInterceptor.html",[0,0.122,3,0.287,4,0.287,5,0.251,7,1.347,9,0.365,10,1.336,15,1.106,17,1.81,18,0.037,19,1.215,20,0.832,21,1.472,23,1.336,25,0.789,26,3.57,27,1.772,28,0.453,29,2.176,30,2.302,31,1.202,32,0.287,33,1.081,34,1.787,39,1.202,42,3.208,43,0.887,47,2.439,50,0.754,53,1.081,54,1.347,55,1.347,58,0.978,59,1.081,61,1.628,63,1.628,64,1.958,65,2.028,66,0.019,67,0.019,76,1.106,77,2.302,78,3.08,79,3.08,81,1.529,82,3.303,83,1.347,86,2.768,87,2.302,88,2.768,89,1.529,90,2.302,91,2.277,92,1.529,96,1.529,131,1.202,171,2.597,174,1.81,176,2.302,177,1.772,178,3.208,179,3.224,180,3.224,181,2.142,182,1.772,183,2.142,184,3.224,185,2.142,186,2.142,187,2.142,188,2.142,189,2.142,190,1.772,191,2.142,192,2.142,193,3.877,194,3.224,195,2.142,196,5.044,197,2.142,198,2.142,199,2.142,200,2.142,201,2.142,202,2.142,203,2.142,204,2.142,205,2.142,206,2.142,207,2.142,208,2.142,209,2.142,210,1.772,211,2.142]],["title/interfaces/ErrorResponse.html",[68,1.278,174,1.731]],["body/interfaces/ErrorResponse.html",[3,0.444,4,0.444,5,0.388,9,0.565,18,0.036,20,1.501,32,0.589,39,2.465,43,2.174,47,3.435,50,1.377,53,2.65,55,2.763,58,2.396,59,1.673,61,1.673,63,2.218,66,0.026,67,0.026,68,1.82,70,2.084,72,2.006,75,4.342,157,2.218,171,1.859,172,2.365,173,2.365,174,2.465,175,3.518]],["title/modules/MongoModule.html",[109,0.963,140,1.731]],["body/modules/MongoModule.html",[0,0.22,3,0.518,4,0.518,5,0.453,18,0.037,25,0.905,28,0.818,32,0.518,66,0.029,67,0.029,109,1.516,111,1.603,127,2.171,140,2.725,146,2.762,212,3.868,213,3.201,214,2.171,215,5.564,216,3.868,217,3.868,218,2.762,219,3.868,220,3.868,221,3.868]],["title/classes/Patient.html",[0,0.176,222,1.557]],["body/classes/Patient.html",[0,0.158,2,1.399,3,0.371,4,0.371,5,0.325,9,0.473,15,1.824,18,0.036,19,1.693,20,1.41,21,2.224,25,0.473,32,0.521,34,1.148,50,1.2,54,1.743,66,0.023,67,0.023,72,1.775,84,2.758,102,3.345,155,3.207,156,3.207,157,1.963,175,2.776,214,1.555,222,1.963,223,1.978,224,3.207,225,2.826,226,3.717,227,3.888,228,2.771,229,4.87,230,5.665,231,2.771,232,3.888,233,2.771,234,2.771,235,2.771,236,4.03,237,2.771,238,2.771,239,3.218,240,2.771,241,2.771,242,1.743,243,2.293]],["title/controllers/PatientsController.html",[97,1.557,244,1.94]],["body/controllers/PatientsController.html",[0,0.116,3,0.273,4,0.273,5,0.239,9,0.347,10,1.286,15,1.552,17,2.54,18,0.036,19,1.705,20,1.168,21,2.066,23,1.875,25,0.772,28,0.431,32,0.273,33,2.285,34,1.286,50,1.33,66,0.018,67,0.018,91,1.875,97,1.028,99,1.143,102,2.847,106,1.685,107,1.454,152,2.177,218,4.057,244,1.952,245,1.685,246,2.037,247,1.685,248,1.742,249,2.216,250,2.216,251,2.216,252,2.365,253,1.685,254,3.76,255,2.037,256,1.685,257,2.684,258,2.037,259,1.952,260,1.685,261,3.103,262,2.037,263,3,264,1.685,265,3.103,266,2.037,267,1.685,268,2.581,269,3.103,270,2.037,271,3.103,272,1.685,273,2.037,274,2.037,275,2.037,276,1.454,277,1.952,278,1.454,279,1.898,280,1.685,281,1.281,282,2.037,283,2.037,284,2.037,285,2.037,286,2.037,287,2.037,288,2.037,289,2.037,290,2.037,291,2.037,292,3.103,293,3.103,294,2.037,295,2.037,296,2.037,297,2.037,298,2.037,299,2.037,300,2.037,301,2.037,302,2.037,303,2.037,304,2.037]],["title/modules/PatientsModule.html",[109,0.963,122,1.731]],["body/modules/PatientsModule.html",[0,0.192,3,0.451,4,0.451,5,0.394,18,0.036,19,1.268,25,0.936,28,0.712,32,0.451,66,0.026,67,0.026,99,2.492,109,1.551,111,1.395,112,1.7,113,2.118,114,2.118,115,1.7,116,3.125,117,2.118,122,3.164,123,2.793,124,2.118,125,2.118,127,1.89,213,2.786,214,1.89,222,1.7,239,2.786,242,2.793,244,3.125,279,2.846,280,2.786,305,2.786,306,2.786,307,3.366,308,3.366,309,2.403,310,3.366]],["title/injectables/PatientsService.html",[76,1.058,279,1.557]],["body/injectables/PatientsService.html",[0,0.085,3,0.2,4,0.2,5,0.174,9,0.254,10,1.004,11,3.219,15,1.43,17,2.341,18,0.037,19,1.571,20,1.076,21,1.904,23,1.612,25,0.75,28,0.315,32,0.2,33,1.964,34,2.066,43,0.617,50,1.109,64,2.46,66,0.014,67,0.014,76,0.831,84,1.224,91,1.612,107,1.063,131,0.836,152,1.904,157,2.105,178,1.232,214,0.836,218,3.797,222,0.752,224,1.063,225,0.937,248,1.361,249,1.731,250,1.731,251,1.731,252,1.525,253,2.006,256,2.006,257,2.523,259,1.525,260,2.006,263,1.929,264,2.006,267,2.006,268,2.314,276,1.063,277,1.525,278,1.063,279,1.224,309,1.063,311,1.232,312,2.424,313,1.489,314,3.533,315,1.489,316,2.424,317,1.489,318,1.489,319,1.489,320,1.489,321,1.489,322,1.489,323,1.489,324,1.063,325,1.232,326,1.232,327,1.489,328,1.489,329,3.89,330,1.489,331,1.489,332,1.489,333,1.489,334,1.489,335,1.489,336,1.489,337,2.424,338,1.489,339,4.871,340,4.738,341,1.489,342,2.424,343,2.424,344,1.489,345,1.489,346,1.489,347,1.489,348,1.489,349,1.489,350,3.066,351,3.066,352,3.89,353,3.066,354,2.424,355,1.489,356,2.424,357,1.489,358,1.489,359,1.489,360,1.489,361,1.489,362,1.489,363,3.066,364,2.424,365,2.424,366,1.489,367,1.232,368,1.489,369,1.489,370,0.937,371,1.232,372,1.232,373,1.232,374,1.232]],["title/classes/PatientsSwagger.html",[0,0.176,281,1.94]],["body/classes/PatientsSwagger.html",[0,0.069,2,0.616,3,0.163,4,0.163,5,0.143,9,0.208,10,0.851,15,1.196,18,0.037,19,1.803,20,0.807,23,1.445,25,0.595,28,0.258,32,0.163,39,1.958,43,0.505,54,2.53,66,0.012,67,0.012,69,2.122,91,1.445,152,0.938,155,2.871,156,2.871,157,1.038,190,2.886,222,0.616,224,2.49,225,2.194,226,2.886,236,1.701,248,1.754,249,2.231,250,2.231,251,2.231,252,1.966,257,0.871,259,0.767,263,2.765,268,1.038,276,0.871,277,1.293,278,0.871,281,1.293,309,0.871,367,1.009,370,0.767,371,4.43,372,1.009,373,1.009,374,2.586,375,1.009,376,5.053,377,1.22,378,1.22,379,1.22,380,1.22,381,1.22,382,3.78,383,3.78,384,3.125,385,2.663,386,2.663,387,1.009,388,4.785,389,1.701,390,3.125,391,1.22,392,3.76,393,2.055,394,4.022,395,1.701,396,3.125,397,2.871,398,3.78,399,3.78,400,3.125,401,3.125,402,3.78,403,2.055,404,2.586,405,2.055,406,1.22,407,2.055,408,3.488,409,3.488,410,1.22,411,1.701,412,2.055,413,3.488,414,3.125,415,4.543,416,4.543,417,4.022,418,2.055,419,1.009,420,1.009,421,1.701,422,1.22,423,3.125,424,2.055,425,1.22,426,1.22,427,1.22,428,1.22,429,1.22,430,1.22,431,1.22,432,2.055,433,2.663,434,1.701,435,1.22,436,2.055,437,2.055,438,2.055,439,1.22,440,1.22,441,1.009]],["title/injectables/ResponseInterceptor.html",[76,1.058,85,1.94]],["body/injectables/ResponseInterceptor.html",[0,0.15,3,0.352,4,0.352,5,0.308,7,1.655,9,0.449,10,1.553,15,0.902,17,2.104,18,0.037,19,0.991,20,0.968,21,1.201,23,1.09,25,0.812,28,0.556,29,2.451,31,1.477,32,0.352,33,1.328,34,1.553,43,1.972,50,1.177,53,1.892,58,1.711,59,1.892,61,2.205,63,1.892,64,1.328,65,1.655,66,0.022,67,0.022,68,1.09,69,1.477,71,1.878,73,4.453,74,3.938,76,1.286,77,2.676,78,3.397,79,3.397,80,2.177,81,1.878,82,3.117,83,1.655,84,1.892,85,2.358,86,3.117,87,2.676,88,3.117,89,1.878,90,2.676,91,1.09,92,1.878,93,2.177,94,2.177,95,2.177,96,1.878,131,1.477,182,2.177,442,2.63]],["title/classes/UpdatePatientDto.html",[0,0.176,268,1.557]],["body/classes/UpdatePatientDto.html",[0,0.238,2,2.11,3,0.56,4,0.56,5,0.489,18,0.035,25,0.868,32,0.56,66,0.03,67,0.03,152,1.908,154,2.629,173,3.636,248,2.346,268,2.571,277,2.629,324,2.984,443,3.459,444,5.093,445,4.18,446,3.459]],["title/coverage.html",[447,3.464]],["body/coverage.html",[0,0.298,1,2.082,5,0.342,6,2.414,18,0.036,20,0.753,64,1.473,66,0.024,67,0.024,68,1.913,69,1.637,71,2.877,76,1.708,85,1.835,97,2.035,98,1.835,100,2.414,104,1.473,115,1.473,132,2.414,144,2.082,147,2.082,152,1.332,153,2.414,154,2.535,171,1.637,172,2.877,174,1.637,176,2.082,177,2.414,222,1.473,223,2.877,242,1.835,244,1.835,245,2.414,268,1.473,279,1.473,281,1.835,311,2.414,375,2.414,443,2.414,447,2.414,448,2.917,449,2.917,450,2.917,451,6.075,452,4.98,453,4.03,454,4.98,455,4.03,456,4.03,457,2.414,458,2.917,459,2.917,460,4.03,461,4.03,462,2.917,463,2.917]],["title/dependencies.html",[112,1.87,464,2.14]],["body/dependencies.html",[0,0.224,18,0.037,28,0.834,31,2.212,58,1.8,66,0.029,67,0.029,83,2.48,112,1.99,146,2.814,168,3.262,214,2.212,324,2.814,387,3.262,446,3.262,465,5.351,466,3.942,467,3.942,468,3.942,469,3.942,470,3.942,471,3.942,472,3.942,473,3.942,474,3.942,475,3.942,476,3.942,477,3.942]],["title/miscellaneous/enumerations.html",[478,1.306,479,3.064]],["body/miscellaneous/enumerations.html",[9,0.759,18,0.033,66,0.031,67,0.031,263,2.798,326,4.375,370,2.798,397,3.176,478,2.246,479,3.681,480,4.448,481,4.448,482,4.448,483,4.448,484,3.681,485,4.448]],["title/miscellaneous/functions.html",[478,1.306,486,3.064]],["body/miscellaneous/functions.html",[9,0.788,18,0.032,66,0.032,67,0.032,115,2.895,457,3.825,478,2.334,486,3.825,487,4.622]],["title/index.html",[9,0.441,488,2.586,489,2.586]],["body/index.html",[18,0.036,29,1.329,30,1.69,66,0.02,67,0.02,97,1.196,154,2.185,225,1.49,247,3.404,248,1.329,252,1.49,259,1.49,272,1.959,325,1.959,370,2.185,389,1.959,395,3.75,404,4.313,411,3.404,419,1.959,420,1.959,421,3.404,434,1.959,441,1.959,484,1.959,490,3.473,491,4.114,492,5.212,493,2.368,494,3.473,495,4.825,496,5.212,497,4.825,498,2.368,499,2.368,500,2.368,501,2.368,502,2.368,503,2.368,504,2.368,505,3.473,506,2.368,507,2.368,508,2.368,509,2.368,510,3.473,511,2.368,512,2.368,513,2.368,514,3.473,515,2.368,516,2.368,517,3.473,518,2.368,519,2.368,520,2.368,521,2.368,522,2.368,523,2.368,524,2.368,525,2.368,526,2.368,527,2.368,528,2.368,529,2.368,530,1.69,531,2.368,532,2.368,533,2.368,534,2.368,535,3.473,536,2.368,537,2.368,538,2.368,539,2.368,540,3.473,541,2.368,542,2.368,543,3.473,544,2.368,545,2.368,546,2.368,547,3.473,548,2.368,549,3.473,550,2.368,551,2.368,552,2.368,553,2.368,554,2.368,555,2.368,556,2.368,557,2.368,558,2.368,559,2.368,560,2.368,561,2.368,562,2.368,563,2.368]],["title/modules.html",[111,1.735]],["body/modules.html",[18,0.03,66,0.03,67,0.03,110,2.67,111,1.758,121,2.382,122,2.382,139,2.382,140,2.382,564,5.529,565,5.529,566,5.529,567,5.886,568,5.14,569,5.14]],["title/overview.html",[570,3.464]],["body/overview.html",[2,1.666,18,0.035,66,0.026,67,0.026,70,2.076,99,1.852,104,2.483,109,1.03,110,3.654,111,1.367,112,1.666,113,2.076,114,2.076,115,1.666,116,2.076,117,2.076,118,2.73,119,2.73,120,2.73,121,3.3,122,3.061,123,2.756,124,2.076,125,2.076,131,1.852,136,2.73,137,2.73,138,2.73,139,3.21,140,3.21,279,2.483,305,2.73,306,2.73,570,2.73,571,4.381,572,3.299,573,3.299,574,3.299]],["title/properties.html",[72,1.691,464,2.14]],["body/properties.html",[18,0.036,66,0.031,67,0.031,72,2.076,392,3.762,575,4.546,576,4.546,577,4.546,578,4.546,579,4.546]],["title/miscellaneous/variables.html",[478,1.306,530,2.644]],["body/miscellaneous/variables.html",[9,0.731,18,0.035,20,1.107,50,1.003,66,0.03,67,0.03,144,3.061,147,3.692,148,3.548,210,4.28,223,3.061,242,3.254,243,3.548,397,3.692,478,2.165,530,3.061,580,4.288,581,4.288]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":576,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":416,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["1",{"_index":342,"title":{},"body":{"injectables/PatientsService.html":{}}}],["10",{"_index":292,"title":{},"body":{"controllers/PatientsController.html":{}}}],["11.0.1",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["18t18:00:00.000z",{"_index":417,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["18t18:05:00.000z",{"_index":432,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["18t18:30:00.000z",{"_index":440,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["2",{"_index":572,"title":{},"body":{"overview.html":{}}}],["200",{"_index":423,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["201",{"_index":406,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["2025",{"_index":415,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["28",{"_index":430,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["3",{"_index":574,"title":{},"body":{"overview.html":{}}}],["35",{"_index":400,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["36",{"_index":436,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["4",{"_index":573,"title":{},"body":{"overview.html":{}}}],["4.0.2",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":571,"title":{},"body":{"overview.html":{}}}],["64ddf6a2b3e5c123456789ab",{"_index":414,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["64ddf6b7b3e5c123456789ac",{"_index":427,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["7.8.1",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":413,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["acceso",{"_index":539,"title":{},"body":{"index.html":{}}}],["actualización",{"_index":435,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["actualizado",{"_index":438,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["actualizar",{"_index":434,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["age",{"_index":155,"title":{},"body":{"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"classes/PatientsSwagger.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["ana",{"_index":428,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["api",{"_index":490,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":386,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["apioperation",{"_index":383,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["apiparam",{"_index":384,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["apiquery",{"_index":385,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["apiresponse",{"_index":69,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["app.controller",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["app.module.ts",{"_index":512,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":98,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":409,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["applydecorators",{"_index":382,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":104,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["arraynotempty",{"_index":164,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["async",{"_index":218,"title":{},"body":{"modules/MongoModule.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["author",{"_index":579,"title":{},"body":{"properties.html":{}}}],["available",{"_index":569,"title":{},"body":{"modules.html":{}}}],["await",{"_index":364,"title":{},"body":{"injectables/PatientsService.html":{}}}],["bad_request",{"_index":198,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["badrequesterrorenum",{"_index":326,"title":{},"body":{"injectables/PatientsService.html":{},"miscellaneous/enumerations.html":{}}}],["badrequestexception",{"_index":322,"title":{},"body":{"injectables/PatientsService.html":{}}}],["badrequestexception(badrequesterrorenum.invalid_id",{"_index":351,"title":{},"body":{"injectables/PatientsService.html":{}}}],["body",{"_index":271,"title":{},"body":{"controllers/PatientsController.html":{}}}],["boolean",{"_index":175,"title":{},"body":{"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{}}}],["bootstrap",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":567,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":564,"title":{},"body":{"modules.html":{}}}],["cabeza",{"_index":405,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["callhandler",{"_index":79,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["cansancio",{"_index":431,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["case",{"_index":196,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["catch",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/PatientsService.html":{}}}],["catch(exception",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["catcherror",{"_index":185,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["catcherror((error",{"_index":187,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"injectables/ErrorInterceptor.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{},"overview.html":{}}}],["clonar",{"_index":519,"title":{},"body":{"index.html":{}}}],["clone",{"_index":522,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":136,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":138,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_imports",{"_index":137,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_patientsmodule",{"_index":305,"title":{},"body":{"modules/PatientsModule.html":{},"overview.html":{}}}],["cluster_patientsmodule_providers",{"_index":306,"title":{},"body":{"modules/PatientsModule.html":{},"overview.html":{}}}],["code",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{}}}],["common/common.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["commonmodule",{"_index":121,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["como",{"_index":553,"title":{},"body":{"index.html":{}}}],["con",{"_index":411,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["config.module",{"_index":143,"title":{},"body":{"modules/CommonModule.html":{}}}],["configmodule",{"_index":139,"title":{"modules/ConfigModule.html":{}},"body":{"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":215,"title":{},"body":{"modules/MongoModule.html":{}}}],["configservice.get('mongodb_url",{"_index":220,"title":{},"body":{"modules/MongoModule.html":{}}}],["conflict",{"_index":206,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["const",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"modules/ConfigModule.html":{},"injectables/ErrorInterceptor.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}}}],["constructor",{"_index":312,"title":{},"body":{"injectables/PatientsService.html":{}}}],["constructor(patientmodel",{"_index":313,"title":{},"body":{"injectables/PatientsService.html":{}}}],["constructor(private",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/PatientsController.html":{}}}],["content",{"_index":408,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["context",{"_index":87,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":89,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":97,"title":{"controllers/AppController.html":{},"controllers/PatientsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/PatientsController.html":{},"coverage.html":{},"index.html":{}}}],["controller('patients",{"_index":283,"title":{},"body":{"controllers/PatientsController.html":{}}}],["controllers",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["coverage",{"_index":447,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creado",{"_index":407,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["crear",{"_index":389,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["create",{"_index":248,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{},"index.html":{}}}],["create(@body",{"_index":285,"title":{},"body":{"controllers/PatientsController.html":{}}}],["create(createpatientdto",{"_index":253,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["createdat",{"_index":224,"title":{},"body":{"classes/Patient.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["createpatientdto",{"_index":152,"title":{"classes/CreatePatientDto.html":{}},"body":{"classes/CreatePatientDto.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{}}}],["createpatientdto.age",{"_index":334,"title":{},"body":{"injectables/PatientsService.html":{}}}],["createpatientdto.name",{"_index":332,"title":{},"body":{"injectables/PatientsService.html":{}}}],["createpatientdto.symptoms",{"_index":336,"title":{},"body":{"injectables/PatientsService.html":{}}}],["crtpatient",{"_index":337,"title":{},"body":{"injectables/PatientsService.html":{}}}],["ctx",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getrequest",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["customerror",{"_index":171,"title":{"interfaces/CustomError.html":{}},"body":{"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["data",{"_index":73,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["date",{"_index":229,"title":{},"body":{"classes/Patient.html":{}}}],["date().toisostring",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["datos",{"_index":393,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["de",{"_index":404,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["declarations",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["decorators",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{}}}],["default",{"_index":210,"title":{},"body":{"injectables/ErrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePatientDto.html":{},"injectables/ErrorInterceptor.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["del",{"_index":190,"title":{},"body":{"injectables/ErrorInterceptor.html":{},"classes/PatientsSwagger.html":{}}}],["delete",{"_index":272,"title":{},"body":{"controllers/PatientsController.html":{},"index.html":{}}}],["delete(':id",{"_index":265,"title":{},"body":{"controllers/PatientsController.html":{}}}],["deletedpatient",{"_index":368,"title":{},"body":{"injectables/PatientsService.html":{}}}],["deletedpatient?.isdeleted",{"_index":369,"title":{},"body":{"injectables/PatientsService.html":{}}}],["dependencies",{"_index":112,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desconocido",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["description",{"_index":392,"title":{},"body":{"classes/PatientsSwagger.html":{},"properties.html":{}}}],["desde",{"_index":545,"title":{},"body":{"index.html":{}}}],["details",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["documentación",{"_index":497,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["dolor",{"_index":403,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["dto",{"_index":501,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":276,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["dto/update",{"_index":278,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["dtos",{"_index":556,"title":{},"body":{"index.html":{}}}],["each",{"_index":170,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["ejemplo",{"_index":396,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["ejemplos",{"_index":549,"title":{},"body":{"index.html":{}}}],["el",{"_index":370,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["eliminado",{"_index":374,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["eliminar",{"_index":441,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["en",{"_index":543,"title":{},"body":{"index.html":{}}}],["encesitan",{"_index":529,"title":{},"body":{"index.html":{}}}],["encontrado",{"_index":367,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["endpoints",{"_index":510,"title":{},"body":{"index.html":{}}}],["entities",{"_index":502,"title":{},"body":{"index.html":{}}}],["entities/patient.entity",{"_index":309,"title":{},"body":{"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["entorno",{"_index":531,"title":{},"body":{"index.html":{}}}],["entrada",{"_index":517,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":479,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.dev",{"_index":148,"title":{},"body":{"modules/ConfigModule.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":150,"title":{},"body":{"modules/ConfigModule.html":{}}}],["environment_variable",{"_index":147,"title":{},"body":{"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":339,"title":{},"body":{"injectables/PatientsService.html":{}}}],["error",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{}}}],["error('paciente",{"_index":366,"title":{},"body":{"injectables/PatientsService.html":{}}}],["error.code",{"_index":194,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["error.message",{"_index":188,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["error.status",{"_index":193,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["errorinterceptor",{"_index":176,"title":{"injectables/ErrorInterceptor.html":{}},"body":{"injectables/ErrorInterceptor.html":{},"coverage.html":{}}}],["errorresponse",{"_index":174,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["es",{"_index":484,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["est",{"_index":541,"title":{},"body":{"index.html":{}}}],["estructura",{"_index":498,"title":{},"body":{"index.html":{}}}],["example",{"_index":395,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["examples",{"_index":394,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["exception",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.message",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exec",{"_index":349,"title":{},"body":{"injectables/PatientsService.html":{}}}],["executioncontext",{"_index":78,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["exitosa",{"_index":95,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["export",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{}}}],["exports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["express",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["extends",{"_index":173,"title":{},"body":{"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"classes/UpdatePatientDto.html":{}}}],["false",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{},"classes/Patient.html":{},"classes/PatientsSwagger.html":{}}}],["fatiga",{"_index":437,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["ficheros",{"_index":499,"title":{},"body":{"index.html":{}}}],["fiebre",{"_index":401,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{}}}],["find",{"_index":345,"title":{},"body":{"injectables/PatientsService.html":{}}}],["findall",{"_index":249,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["findall(@query('page",{"_index":288,"title":{},"body":{"controllers/PatientsController.html":{}}}],["findall(page",{"_index":256,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["findone",{"_index":250,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["findone(@param('id",{"_index":297,"title":{},"body":{"controllers/PatientsController.html":{}}}],["findone(id",{"_index":260,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["forbidden",{"_index":202,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["formattedmessage",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["foundpatient",{"_index":354,"title":{},"body":{"injectables/PatientsService.html":{}}}],["framework",{"_index":554,"title":{},"body":{"index.html":{}}}],["function",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":486,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":261,"title":{},"body":{"controllers/PatientsController.html":{}}}],["geterrorcode",{"_index":179,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["geterrorcode(error",{"_index":180,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["gethello",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":488,"title":{"index.html":{}},"body":{}}],["git",{"_index":521,"title":{},"body":{"index.html":{}}}],["graph",{"_index":568,"title":{},"body":{"modules.html":{}}}],["gómez",{"_index":429,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["ha",{"_index":372,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["habilitado",{"_index":542,"title":{},"body":{"index.html":{}}}],["hello",{"_index":134,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["http://localhost:4000/api",{"_index":544,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{}}}],["https://github.com/alejandrogaga/romiai.git",{"_index":523,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{}}}],["httpstatus.bad_request",{"_index":197,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["httpstatus.conflict",{"_index":205,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["httpstatus.forbidden",{"_index":201,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["httpstatus.internal_server_error",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{}}}],["httpstatus.not_found",{"_index":203,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["httpstatus.unauthorized",{"_index":199,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["httpstatus.unprocessable_entity",{"_index":207,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["id",{"_index":263,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"miscellaneous/enumerations.html":{}}}],["identifier",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["import",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"injectables/ErrorInterceptor.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{}}}],["importante",{"_index":525,"title":{},"body":{"index.html":{}}}],["imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/MongoModule.html":{},"modules/PatientsModule.html":{}}}],["inciiar",{"_index":533,"title":{},"body":{"index.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{}}}],["información",{"_index":559,"title":{},"body":{"index.html":{}}}],["iniciar",{"_index":524,"title":{},"body":{"index.html":{}}}],["inject",{"_index":221,"title":{},"body":{"modules/MongoModule.html":{}}}],["injectable",{"_index":76,"title":{"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{},"overview.html":{}}}],["injectmodel",{"_index":323,"title":{},"body":{"injectables/PatientsService.html":{}}}],["injectmodel(patient.name",{"_index":328,"title":{},"body":{"injectables/PatientsService.html":{}}}],["instalación",{"_index":518,"title":{},"body":{"index.html":{}}}],["install",{"_index":536,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["intercept",{"_index":86,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":182,"title":{},"body":{"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["interface",{"_index":68,"title":{"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":70,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"overview.html":{}}}],["interfaces/error_response.interface",{"_index":186,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["internal",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["internal_server_error",{"_index":209,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["interno",{"_index":189,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["intpt",{"_index":330,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intpt.age",{"_index":333,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intpt.name",{"_index":331,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intpt.symptoms",{"_index":335,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intptupdate",{"_index":356,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intptupdate.age",{"_index":359,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intptupdate.name",{"_index":357,"title":{},"body":{"injectables/PatientsService.html":{}}}],["intptupdate.symptoms",{"_index":361,"title":{},"body":{"injectables/PatientsService.html":{}}}],["invalid_id",{"_index":482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isarray",{"_index":165,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["isarray()@arraynotempty()@isstring({each",{"_index":162,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["isdeleted",{"_index":225,"title":{},"body":{"classes/Patient.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"index.html":{}}}],["isglobal",{"_index":151,"title":{},"body":{"modules/ConfigModule.html":{}}}],["isint",{"_index":166,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["isint()@min(0",{"_index":158,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["isstring",{"_index":160,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["juan",{"_index":398,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["la",{"_index":540,"title":{},"body":{"index.html":{}}}],["legend",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["license",{"_index":577,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":257,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["limit(limit",{"_index":347,"title":{},"body":{"injectables/PatientsService.html":{}}}],["limitdetalles",{"_index":551,"title":{},"body":{"index.html":{}}}],["limitint",{"_index":293,"title":{},"body":{"controllers/PatientsController.html":{}}}],["limpio",{"_index":563,"title":{},"body":{"index.html":{}}}],["lista",{"_index":424,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["listapacientes",{"_index":425,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["literal",{"_index":75,"title":{},"body":{"interfaces/ApiResponse.html":{},"interfaces/ErrorResponse.html":{}}}],["los",{"_index":420,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["lógica",{"_index":507,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":515,"title":{},"body":{"index.html":{}}}],["manejar",{"_index":493,"title":{},"body":{"index.html":{}}}],["mantener",{"_index":562,"title":{},"body":{"index.html":{}}}],["map",{"_index":80,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":93,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["metadata",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["method",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["method?.touppercase",{"_index":96,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["min",{"_index":167,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["min(0",{"_index":169,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["miscellaneous",{"_index":478,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":314,"title":{},"body":{"injectables/PatientsService.html":{}}}],["module",{"_index":109,"title":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/MongoModule.html":{},"modules/PatientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/MongoModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["modules",{"_index":111,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"modules/MongoModule.html":{},"modules/PatientsModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["mongo.module",{"_index":142,"title":{},"body":{"modules/CommonModule.html":{}}}],["mongodb",{"_index":494,"title":{},"body":{"index.html":{}}}],["mongomodule",{"_index":140,"title":{"modules/MongoModule.html":{}},"body":{"modules/CommonModule.html":{},"modules/MongoModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":325,"title":{},"body":{"injectables/PatientsService.html":{},"index.html":{}}}],["mongoosemodule",{"_index":213,"title":{},"body":{"modules/MongoModule.html":{},"modules/PatientsModule.html":{}}}],["mongoosemodule.forfeature",{"_index":310,"title":{},"body":{"modules/PatientsModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":216,"title":{},"body":{"modules/MongoModule.html":{}}}],["módulo",{"_index":513,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreatePatientDto.html":{},"injectables/ErrorInterceptor.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["negocio",{"_index":508,"title":{},"body":{"index.html":{}}}],["nestconfigmodule",{"_index":145,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nestconfigmodule.forroot",{"_index":149,"title":{},"body":{"modules/ConfigModule.html":{}}}],["nestinterceptor",{"_index":77,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["nestjs",{"_index":491,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"injectables/ErrorInterceptor.html":{},"modules/MongoModule.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":146,"title":{},"body":{"modules/ConfigModule.html":{},"modules/MongoModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":446,"title":{},"body":{"classes/UpdatePatientDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":214,"title":{},"body":{"modules/MongoModule.html":{},"classes/Patient.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":387,"title":{},"body":{"classes/PatientsSwagger.html":{},"dependencies.html":{}}}],["new",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["next",{"_index":88,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":92,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["not_found",{"_index":204,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["npm",{"_index":535,"title":{},"body":{"index.html":{}}}],["nuevo",{"_index":391,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["number",{"_index":157,"title":{},"body":{"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["objectid",{"_index":352,"title":{},"body":{"injectables/PatientsService.html":{}}}],["observable",{"_index":82,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["obtener",{"_index":418,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["operación",{"_index":94,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}}}],["out",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["overview",{"_index":570,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["paciente",{"_index":371,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["pacienteactualizado",{"_index":439,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["pacientecreado",{"_index":410,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["pacientes",{"_index":421,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["package",{"_index":464,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":259,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"index.html":{}}}],["pageint",{"_index":290,"title":{},"body":{"controllers/PatientsController.html":{}}}],["paginación",{"_index":550,"title":{},"body":{"index.html":{}}}],["paginada",{"_index":426,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["paginados",{"_index":422,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["para",{"_index":492,"title":{},"body":{"index.html":{}}}],["param",{"_index":273,"title":{},"body":{"controllers/PatientsController.html":{}}}],["param('id",{"_index":300,"title":{},"body":{"controllers/PatientsController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}}}],["parseint(limit",{"_index":294,"title":{},"body":{"controllers/PatientsController.html":{}}}],["parseint(page",{"_index":291,"title":{},"body":{"controllers/PatientsController.html":{}}}],["partialtype",{"_index":445,"title":{},"body":{"classes/UpdatePatientDto.html":{}}}],["partialtype(createpatientdto",{"_index":444,"title":{},"body":{"classes/UpdatePatientDto.html":{}}}],["patch",{"_index":274,"title":{},"body":{"controllers/PatientsController.html":{}}}],["patch(':id",{"_index":269,"title":{},"body":{"controllers/PatientsController.html":{}}}],["path",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["patient",{"_index":222,"title":{"classes/Patient.html":{}},"body":{"classes/Patient.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"coverage.html":{}}}],["patient.dto",{"_index":277,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{}}}],["patient.dto.ts",{"_index":154,"title":{},"body":{"classes/CreatePatientDto.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{},"index.html":{}}}],["patient.dto.ts:14",{"_index":163,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["patient.dto.ts:5",{"_index":161,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["patient.dto.ts:9",{"_index":159,"title":{},"body":{"classes/CreatePatientDto.html":{}}}],["patient.entity.ts",{"_index":503,"title":{},"body":{"index.html":{}}}],["patientmodel",{"_index":316,"title":{},"body":{"injectables/PatientsService.html":{}}}],["patients",{"_index":247,"title":{},"body":{"controllers/PatientsController.html":{},"index.html":{}}}],["patients.controller",{"_index":308,"title":{},"body":{"modules/PatientsModule.html":{}}}],["patients.controller.ts",{"_index":509,"title":{},"body":{"index.html":{}}}],["patients.service",{"_index":280,"title":{},"body":{"controllers/PatientsController.html":{},"modules/PatientsModule.html":{}}}],["patients.service.ts",{"_index":506,"title":{},"body":{"index.html":{}}}],["patients.swagger.ts",{"_index":504,"title":{},"body":{"index.html":{}}}],["patients/patients.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["patientschema",{"_index":242,"title":{},"body":{"classes/Patient.html":{},"modules/PatientsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patientscontroller",{"_index":244,"title":{"controllers/PatientsController.html":{}},"body":{"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"coverage.html":{}}}],["patientsmodule",{"_index":122,"title":{"modules/PatientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PatientsModule.html":{},"modules.html":{},"overview.html":{}}}],["patientsservice",{"_index":279,"title":{"injectables/PatientsService.html":{}},"body":{"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"coverage.html":{},"overview.html":{}}}],["patientsswagger",{"_index":281,"title":{"classes/PatientsSwagger.html":{}},"body":{"controllers/PatientsController.html":{},"classes/PatientsSwagger.html":{},"coverage.html":{}}}],["patientsswagger.create",{"_index":284,"title":{},"body":{"controllers/PatientsController.html":{}}}],["patientsswagger.findall",{"_index":287,"title":{},"body":{"controllers/PatientsController.html":{}}}],["patientsswagger.findone",{"_index":296,"title":{},"body":{"controllers/PatientsController.html":{}}}],["patientsswagger.remove",{"_index":302,"title":{},"body":{"controllers/PatientsController.html":{}}}],["patientsswagger.update",{"_index":299,"title":{},"body":{"controllers/PatientsController.html":{}}}],["poder",{"_index":532,"title":{},"body":{"index.html":{}}}],["podrás",{"_index":546,"title":{},"body":{"index.html":{}}}],["por",{"_index":433,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["post",{"_index":254,"title":{},"body":{"controllers/PatientsController.html":{}}}],["prefix",{"_index":246,"title":{},"body":{"controllers/PatientsController.html":{}}}],["principal",{"_index":514,"title":{},"body":{"index.html":{}}}],["private",{"_index":178,"title":{},"body":{"injectables/ErrorInterceptor.html":{},"injectables/PatientsService.html":{}}}],["probar",{"_index":548,"title":{},"body":{"index.html":{}}}],["prop",{"_index":230,"title":{},"body":{"classes/Patient.html":{}}}],["prop({required",{"_index":227,"title":{},"body":{"classes/Patient.html":{}}}],["prop({type",{"_index":232,"title":{},"body":{"classes/Patient.html":{}}}],["properties",{"_index":72,"title":{"properties.html":{}},"body":{"interfaces/ApiResponse.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{},"properties.html":{}}}],["proporcionado",{"_index":483,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["proyecto",{"_index":534,"title":{},"body":{"index.html":{}}}],["punto",{"_index":516,"title":{},"body":{"index.html":{}}}],["pérez",{"_index":399,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["que",{"_index":527,"title":{},"body":{"index.html":{}}}],["query",{"_index":275,"title":{},"body":{"controllers/PatientsController.html":{}}}],["query('limit",{"_index":289,"title":{},"body":{"controllers/PatientsController.html":{}}}],["readonly",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["recalcar",{"_index":526,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":251,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["remove(@param('id",{"_index":303,"title":{},"body":{"controllers/PatientsController.html":{}}}],["remove(id",{"_index":264,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["repositorio",{"_index":520,"title":{},"body":{"index.html":{}}}],["request",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"index.html":{}}}],["request.method",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request.url",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["request/response",{"_index":555,"title":{},"body":{"index.html":{}}}],["required",{"_index":236,"title":{},"body":{"classes/Patient.html":{},"classes/PatientsSwagger.html":{}}}],["reset",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}],["respgpatient",{"_index":343,"title":{},"body":{"injectables/PatientsService.html":{}}}],["response",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorInterceptor.html":{},"index.html":{}}}],["response.status(status).json",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responseinterceptor",{"_index":85,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["rest",{"_index":511,"title":{},"body":{"index.html":{}}}],["results",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":91,"title":{},"body":{"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["returns",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ErrorInterceptor.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{}}}],["run",{"_index":537,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":83,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":81,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["schema",{"_index":239,"title":{},"body":{"classes/Patient.html":{},"modules/PatientsModule.html":{}}}],["schemafactory",{"_index":240,"title":{},"body":{"classes/Patient.html":{}}}],["schemafactory.createforclass(patient",{"_index":243,"title":{},"body":{"classes/Patient.html":{},"miscellaneous/variables.html":{}}}],["se",{"_index":528,"title":{},"body":{"index.html":{}}}],["separada",{"_index":505,"title":{},"body":{"index.html":{}}}],["server",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["servidor",{"_index":191,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["sido",{"_index":373,"title":{},"body":{"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{}}}],["skip",{"_index":341,"title":{},"body":{"injectables/PatientsService.html":{}}}],["skip(skip",{"_index":346,"title":{},"body":{"injectables/PatientsService.html":{}}}],["soft",{"_index":560,"title":{},"body":{"index.html":{}}}],["sort",{"_index":348,"title":{},"body":{"injectables/PatientsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/CommonModule.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"modules/MongoModule.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"modules/PatientsModule.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"classes/UpdatePatientDto.html":{}}}],["src",{"_index":500,"title":{},"body":{"index.html":{}}}],["src/.../config.module.ts",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error.enum.ts",{"_index":480,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../patient.entity.ts",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":133,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/common.module.ts",{"_index":141,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/config.module.ts",{"_index":144,"title":{},"body":{"modules/ConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/mongo.module.ts",{"_index":212,"title":{},"body":{"modules/MongoModule.html":{}}}],["src/enums/error.enum",{"_index":327,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/enums/error.enum.ts",{"_index":481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/interceptors/error.interceptor.ts",{"_index":177,"title":{},"body":{"injectables/ErrorInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/error.interceptor.ts:16",{"_index":183,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["src/interceptors/error.interceptor.ts:50",{"_index":181,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["src/interceptors/exception.interceptor.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/interceptors/exception.interceptor.ts:12",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/interceptors/interfaces/error_response.interface.ts",{"_index":172,"title":{},"body":{"interfaces/CustomError.html":{},"interfaces/ErrorResponse.html":{},"coverage.html":{}}}],["src/interceptors/response.interceptor.ts",{"_index":71,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/response.interceptor.ts:24",{"_index":442,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/main.ts",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/patients/dto/create",{"_index":153,"title":{},"body":{"classes/CreatePatientDto.html":{},"coverage.html":{}}}],["src/patients/dto/update",{"_index":443,"title":{},"body":{"classes/UpdatePatientDto.html":{},"coverage.html":{}}}],["src/patients/entities/patient.entity.ts",{"_index":223,"title":{},"body":{"classes/Patient.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/patients/entities/patient.entity.ts:10",{"_index":238,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/entities/patient.entity.ts:5",{"_index":234,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/entities/patient.entity.ts:6",{"_index":228,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/entities/patient.entity.ts:7",{"_index":237,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/entities/patient.entity.ts:8",{"_index":233,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/entities/patient.entity.ts:9",{"_index":231,"title":{},"body":{"classes/Patient.html":{}}}],["src/patients/patients.controller.ts",{"_index":245,"title":{},"body":{"controllers/PatientsController.html":{},"coverage.html":{}}}],["src/patients/patients.controller.ts:22",{"_index":255,"title":{},"body":{"controllers/PatientsController.html":{}}}],["src/patients/patients.controller.ts:28",{"_index":258,"title":{},"body":{"controllers/PatientsController.html":{}}}],["src/patients/patients.controller.ts:36",{"_index":262,"title":{},"body":{"controllers/PatientsController.html":{}}}],["src/patients/patients.controller.ts:42",{"_index":270,"title":{},"body":{"controllers/PatientsController.html":{}}}],["src/patients/patients.controller.ts:51",{"_index":266,"title":{},"body":{"controllers/PatientsController.html":{}}}],["src/patients/patients.module.ts",{"_index":307,"title":{},"body":{"modules/PatientsModule.html":{}}}],["src/patients/patients.service.ts",{"_index":311,"title":{},"body":{"injectables/PatientsService.html":{},"coverage.html":{}}}],["src/patients/patients.service.ts:10",{"_index":315,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/patients.service.ts:16",{"_index":317,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/patients.service.ts:31",{"_index":318,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/patients.service.ts:46",{"_index":319,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/patients.service.ts:62",{"_index":321,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/patients.service.ts:93",{"_index":320,"title":{},"body":{"injectables/PatientsService.html":{}}}],["src/patients/swagger/patients.swagger.ts",{"_index":375,"title":{},"body":{"classes/PatientsSwagger.html":{},"coverage.html":{}}}],["src/patients/swagger/patients.swagger.ts:126",{"_index":381,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["src/patients/swagger/patients.swagger.ts:14",{"_index":377,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["src/patients/swagger/patients.swagger.ts:169",{"_index":380,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["src/patients/swagger/patients.swagger.ts:56",{"_index":378,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["src/patients/swagger/patients.swagger.ts:97",{"_index":379,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["start:dev",{"_index":538,"title":{},"body":{"index.html":{}}}],["started",{"_index":489,"title":{"index.html":{}},"body":{}}],["statements",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":376,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["status",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/PatientsSwagger.html":{}}}],["string",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["summary",{"_index":388,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["support",{"_index":565,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":566,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":496,"title":{},"body":{"index.html":{}}}],["swagger/patients.swagger",{"_index":282,"title":{},"body":{"controllers/PatientsController.html":{}}}],["switch",{"_index":195,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["symptoms",{"_index":156,"title":{},"body":{"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"classes/PatientsSwagger.html":{}}}],["t",{"_index":74,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["table",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["this.appservice.gethello",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["this.geterrorcode(error",{"_index":192,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["this.patientmodel",{"_index":344,"title":{},"body":{"injectables/PatientsService.html":{}}}],["this.patientmodel.create(intpt",{"_index":338,"title":{},"body":{"injectables/PatientsService.html":{}}}],["this.patientmodel.findbyid(objectid",{"_index":355,"title":{},"body":{"injectables/PatientsService.html":{}}}],["this.patientmodel.findbyidandupdate",{"_index":365,"title":{},"body":{"injectables/PatientsService.html":{}}}],["this.patientsservice.create(createpatientdto",{"_index":286,"title":{},"body":{"controllers/PatientsController.html":{}}}],["this.patientsservice.findall(pageint",{"_index":295,"title":{},"body":{"controllers/PatientsController.html":{}}}],["this.patientsservice.findone(id",{"_index":298,"title":{},"body":{"controllers/PatientsController.html":{}}}],["this.patientsservice.remove(id",{"_index":304,"title":{},"body":{"controllers/PatientsController.html":{}}}],["this.patientsservice.update(id",{"_index":301,"title":{},"body":{"controllers/PatientsController.html":{}}}],["throw",{"_index":340,"title":{},"body":{"injectables/PatientsService.html":{}}}],["throwerror",{"_index":184,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["timestamp",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/ResponseInterceptor.html":{}}}],["timestamps",{"_index":241,"title":{},"body":{"classes/Patient.html":{}}}],["timezone",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["tipar",{"_index":558,"title":{},"body":{"index.html":{}}}],["todos",{"_index":419,"title":{},"body":{"classes/PatientsSwagger.html":{},"index.html":{}}}],["tos",{"_index":402,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["true",{"_index":84,"title":{},"body":{"interfaces/ApiResponse.html":{},"modules/ConfigModule.html":{},"classes/CreatePatientDto.html":{},"classes/Patient.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}}}],["try",{"_index":329,"title":{},"body":{"injectables/PatientsService.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"classes/CreatePatientDto.html":{},"interfaces/CustomError.html":{},"injectables/ErrorInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/Patient.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["types",{"_index":324,"title":{},"body":{"injectables/PatientsService.html":{},"classes/UpdatePatientDto.html":{},"dependencies.html":{}}}],["types.objectid(id",{"_index":353,"title":{},"body":{"injectables/PatientsService.html":{}}}],["types.objectid.isvalid(id",{"_index":350,"title":{},"body":{"injectables/PatientsService.html":{}}}],["técnicos",{"_index":552,"title":{},"body":{"index.html":{}}}],["un",{"_index":390,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["unauthorized",{"_index":200,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"classes/Patient.html":{}}}],["unknown",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"injectables/ResponseInterceptor.html":{}}}],["unknown_error",{"_index":211,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["unlicensed",{"_index":578,"title":{},"body":{"properties.html":{}}}],["update",{"_index":252,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"index.html":{}}}],["update(id",{"_index":267,"title":{},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{}}}],["updatedat",{"_index":226,"title":{},"body":{"classes/Patient.html":{},"classes/PatientsSwagger.html":{}}}],["updatedpatient",{"_index":363,"title":{},"body":{"injectables/PatientsService.html":{}}}],["updatepatientdto",{"_index":268,"title":{"classes/UpdatePatientDto.html":{}},"body":{"controllers/PatientsController.html":{},"injectables/PatientsService.html":{},"classes/PatientsSwagger.html":{},"classes/UpdatePatientDto.html":{},"coverage.html":{}}}],["updatepatientdto.age",{"_index":360,"title":{},"body":{"injectables/PatientsService.html":{}}}],["updatepatientdto.name",{"_index":358,"title":{},"body":{"injectables/PatientsService.html":{}}}],["updatepatientdto.symptoms",{"_index":362,"title":{},"body":{"injectables/PatientsService.html":{}}}],["uri",{"_index":219,"title":{},"body":{"modules/MongoModule.html":{}}}],["url",{"_index":90,"title":{},"body":{"interfaces/ApiResponse.html":{},"injectables/ErrorInterceptor.html":{},"injectables/ResponseInterceptor.html":{}}}],["usando",{"_index":561,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":217,"title":{},"body":{"modules/MongoModule.html":{}}}],["validar",{"_index":557,"title":{},"body":{"index.html":{}}}],["validation_error",{"_index":208,"title":{},"body":{"injectables/ErrorInterceptor.html":{}}}],["validator",{"_index":168,"title":{},"body":{"classes/CreatePatientDto.html":{},"dependencies.html":{}}}],["value",{"_index":397,"title":{},"body":{"classes/PatientsSwagger.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":530,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ver",{"_index":547,"title":{},"body":{"index.html":{}}}],["version",{"_index":575,"title":{},"body":{"properties.html":{}}}],["void",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["válido",{"_index":485,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["world",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["xito",{"_index":412,"title":{},"body":{"classes/PatientsSwagger.html":{}}}],["y",{"_index":495,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/PatientsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/exception.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/exception.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const message =\n      exception instanceof HttpException\n        ? exception.getResponse()\n        : 'Internal server error';\n\n    const formattedMessage =\n      typeof message === 'string'\n        ? message\n        : (message as { message: string }).message || 'Error desconocido';\n\n    response.status(status).json({\n      success: false,\n      message: formattedMessage,\n      error: {\n        code: status,\n        details: exception instanceof Error ? exception.message : message,\n      },\n      metadata: {\n        path: request.url,\n        method: request.method,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/response.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\n\ninterface ApiResponse {\n  success: true;\n  message: string;\n  data: T;\n  metadata: {\n    path: string;\n    method: string;\n    timestamp: string;\n  };\n}\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const request = context.switchToHttp().getRequest();\n    const { url, method } = request;\n\n    return next.handle().pipe(\n      map((data: T) => ({\n        success: true,\n        message: (data as { message: string })?.message || 'Operación exitosa',\n        data: (data as { data: T })?.data ?? data,\n        metadata: {\n          path: url || '',\n          method: method?.toUpperCase() || 'UNKNOWN',\n          timestamp: new Date().toISOString(),\n        },\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nPatientsModule\n\nPatientsModule\n\nAppModule -->\n\nPatientsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            PatientsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { CommonModule } from './common/common.module';\nimport { PatientsModule } from './patients/patients.module';\n\n@Module({\n  imports: [CommonModule, PatientsModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nConfigModule->CommonModule\n\n\n\n\n\nMongoModule\n\nMongoModule\n\nCommonModule -->\n\nMongoModule->CommonModule\n\n\n\n\n\nConfigModule \n\nConfigModule \n\nConfigModule  -->\n\nCommonModule->ConfigModule \n\n\n\n\n\nMongoModule \n\nMongoModule \n\nMongoModule  -->\n\nCommonModule->MongoModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            MongoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            MongoModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongoModule } from './mongo.module';\nimport { ConfigModule } from './config.module';\n\n@Module({\n  imports: [ConfigModule, MongoModule],\n  exports: [ConfigModule, MongoModule],\n})\nexport class CommonModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule as NestConfigModule } from '@nestjs/config';\nexport const environment_variable: string = '.env.dev';\n@Module({\n  imports: [\n    NestConfigModule.forRoot({\n      envFilePath: [environment_variable],\n      isGlobal: true,\n    }),\n  ],\n})\nexport class ConfigModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePatientDto.html":{"url":"classes/CreatePatientDto.html","title":"class - CreatePatientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePatientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/dto/create-patient.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                symptoms\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/dto/create-patient.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/dto/create-patient.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        symptoms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/dto/create-patient.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsArray, IsInt, IsString, Min } from 'class-validator';\n\nexport class CreatePatientDto {\n  @IsString()\n  name: string;\n\n  @IsInt()\n  @Min(0)\n  age: number;\n\n  @IsArray()\n  @ArrayNotEmpty()\n  @IsString({ each: true })\n  symptoms: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomError.html":{"url":"interfaces/CustomError.html","title":"interface - CustomError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/interfaces/error_response.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  success: boolean;\n  message: string;\n  error: {\n    code: string;\n    status: number;\n    timestamp: string;\n  };\n  metadata: {\n    path: string;\n    method: string;\n    timestamp: string;\n  };\n}\n\nexport interface CustomError extends Error {\n  status?: number;\n  code?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorInterceptor.html":{"url":"injectables/ErrorInterceptor.html","title":"injectable - ErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/error.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrorCode\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrorCode(error: CustomError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/error.interceptor.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            CustomError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/error.interceptor.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Request } from 'express';\nimport { ErrorResponse, CustomError } from './interfaces/error_response.interface';\n\n@Injectable()\nexport class ErrorInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable {\n    const request = context.switchToHttp().getRequest();\n    const { url, method } = request;\n\n    return next.handle().pipe(\n      catchError((error: CustomError): Observable => {\n        const response: ErrorResponse = {\n          success: false,\n          message: error.message || 'Error interno del servidor',\n          error: {\n            code: this.getErrorCode(error),\n            status: error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n            timestamp: new Date().toISOString(),\n          },\n          metadata: {\n            path: url || '',\n            method: method?.toUpperCase() || 'UNKNOWN',\n            timestamp: new Date().toISOString(),\n          },\n        };\n\n        const httpException = new HttpException(\n          response,\n          error.status || HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n\n        return throwError(() => httpException);\n      }),\n    ) as Observable;\n  }\n\n  private getErrorCode(error: CustomError): string {\n    if (error.code) return error.code;\n\n    switch (error.status) {\n      case HttpStatus.BAD_REQUEST:\n        return 'BAD_REQUEST';\n      case HttpStatus.UNAUTHORIZED:\n        return 'UNAUTHORIZED';\n      case HttpStatus.FORBIDDEN:\n        return 'FORBIDDEN';\n      case HttpStatus.NOT_FOUND:\n        return 'NOT_FOUND';\n      case HttpStatus.CONFLICT:\n        return 'CONFLICT';\n      case HttpStatus.UNPROCESSABLE_ENTITY:\n        return 'VALIDATION_ERROR';\n      case HttpStatus.INTERNAL_SERVER_ERROR:\n        return 'INTERNAL_SERVER_ERROR';\n      default:\n        return 'UNKNOWN_ERROR';\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/interfaces/error_response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ErrorResponse {\n  success: boolean;\n  message: string;\n  error: {\n    code: string;\n    status: number;\n    timestamp: string;\n  };\n  metadata: {\n    path: string;\n    method: string;\n    timestamp: string;\n  };\n}\n\nexport interface CustomError extends Error {\n  status?: number;\n  code?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MongoModule.html":{"url":"modules/MongoModule.html","title":"module - MongoModule","body":"\n                   \n\n\n\n\n    Modules\n    MongoModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/mongo.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URL'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class MongoModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Patient.html":{"url":"classes/Patient.html","title":"class - Patient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Patient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/entities/patient.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                    Optional\n                                createdAt\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                symptoms\n                            \n                            \n                                    \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symptoms\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/patients/entities/patient.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema({ timestamps: true })\nexport class Patient {\n  @Prop({ required: true }) name: string;\n  @Prop({ required: true }) age: number;\n  @Prop({ type: [String], required: true }) symptoms: string[];\n  @Prop({ type: Boolean}) isDeleted: false;\n  @Prop() createdAt?: Date;\n  @Prop() updatedAt?: Date;\n}\n\nexport const PatientSchema = SchemaFactory.createForClass(Patient);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PatientsController.html":{"url":"controllers/PatientsController.html","title":"controller - PatientsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PatientsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/patients.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                patients\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPatientDto: CreatePatientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@()\n                \n            \n\n                    \n                        \n                            Defined in src/patients/patients.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPatientDto\n                                            \n                                                            CreatePatientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: string, limit: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@()\n                \n            \n\n                    \n                        \n                            Defined in src/patients/patients.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@()\n                \n            \n\n                    \n                        \n                            Defined in src/patients/patients.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@()\n                \n            \n\n                    \n                        \n                            Defined in src/patients/patients.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePatientDto: UpdatePatientDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@()\n                \n            \n\n                    \n                        \n                            Defined in src/patients/patients.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePatientDto\n                                            \n                                                            UpdatePatientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreatePatientDto } from './dto/create-patient.dto';\nimport { UpdatePatientDto } from './dto/update-patient.dto';\nimport { PatientsService } from './patients.service';\nimport { PatientsSwagger } from './swagger/patients.swagger';\n\n@Controller('patients')\nexport class PatientsController {\n  constructor(private readonly patientsService: PatientsService) {}\n\n  @Post()\n  @PatientsSwagger.create()\n  async create(@Body() createPatientDto: CreatePatientDto) {\n    return this.patientsService.create(createPatientDto);\n  }\n\n  @Get()\n  @PatientsSwagger.findAll()\n  async findAll(@Query('page') page: string, @Query('limit') limit: string) {\n    const pageInt = parseInt(page, 10);\n    const limitInt = parseInt(limit, 10);\n    return this.patientsService.findAll(pageInt, limitInt);\n  }\n\n  @Get(':id')\n  @PatientsSwagger.findOne()\n  async findOne(@Param('id') id: string) {\n    return this.patientsService.findOne(id);\n  }\n\n  @Patch(':id')\n  @PatientsSwagger.update()\n  async update(\n    @Param('id') id: string,\n    @Body() updatePatientDto: UpdatePatientDto,\n  ) {\n    return this.patientsService.update(id, updatePatientDto);\n  }\n\n  @Delete(':id')\n  @PatientsSwagger.remove()\n  async remove(@Param('id') id: string) {\n    return this.patientsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PatientsModule.html":{"url":"modules/PatientsModule.html","title":"module - PatientsModule","body":"\n                   \n\n\n\n\n    Modules\n    PatientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PatientsModule\n\n\n\ncluster_PatientsModule_providers\n\n\n\n\nPatientsService\n\nPatientsService\n\n\n\nPatientsModule\n\nPatientsModule\n\nPatientsModule -->\n\nPatientsService->PatientsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/patients/patients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PatientsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PatientsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PatientsService } from './patients.service';\nimport { PatientsController } from './patients.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PatientSchema } from './entities/patient.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Patient', schema: PatientSchema }]),\n  ],\n  controllers: [PatientsController],\n  providers: [PatientsService],\n})\nexport class PatientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PatientsService.html":{"url":"injectables/PatientsService.html","title":"injectable - PatientsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PatientsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/patients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(patientModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/patients/patients.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        patientModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPatientDto: CreatePatientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/patients.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPatientDto\n                                            \n                                                            CreatePatientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/patients.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/patients.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/patients.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updatePatientDto: UpdatePatientDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/patients.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePatientDto\n                                            \n                                                            UpdatePatientDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { CreatePatientDto } from './dto/create-patient.dto';\nimport { UpdatePatientDto } from './dto/update-patient.dto';\nimport { Patient } from './entities/patient.entity';\nimport { BadRequestErrorEnum } from 'src/enums/error.enum';\n\n@Injectable()\nexport class PatientsService {\n  constructor(\n    @InjectModel(Patient.name)\n    private readonly patientModel: Model,\n  ) {}\n\n  async create(createPatientDto: CreatePatientDto) {\n    try {\n      const intPt = new CreatePatientDto();\n      intPt.name = createPatientDto.name;\n      intPt.age = createPatientDto.age;\n      intPt.symptoms = createPatientDto.symptoms;\n\n      const crtPatient = this.patientModel.create(intPt);\n\n      return crtPatient;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async findAll(page: number, limit: number) {\n    try {\n      const skip = (page - 1) * limit;\n      const resPgPatient = this.patientModel\n        .find()\n        .skip(skip)\n        .limit(limit)\n        .sort({ createdAt: -1 })\n        .exec();\n      return resPgPatient;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async findOne(id: string) {\n    try {\n      if (!Types.ObjectId.isValid(id)) {\n        throw new BadRequestException(BadRequestErrorEnum.INVALID_ID);\n      }\n\n      const objectId = new Types.ObjectId(id);\n\n      const foundPatient = this.patientModel.findById(objectId);\n\n      return foundPatient;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async update(id: string, updatePatientDto: UpdatePatientDto) {\n    try {\n      if (!Types.ObjectId.isValid(id)) {\n        throw new BadRequestException(BadRequestErrorEnum.INVALID_ID);\n      }\n\n      const objectId = new Types.ObjectId(id);\n\n      const intPtUpdate = new UpdatePatientDto();\n      intPtUpdate.name = updatePatientDto.name;\n      intPtUpdate.age = updatePatientDto.age;\n      intPtUpdate.symptoms = updatePatientDto.symptoms;\n\n      const updatedPatient = await this.patientModel.findByIdAndUpdate(\n        objectId,\n        {\n          ...intPtUpdate,\n        },\n        { new: true },\n      );\n\n      if (!updatedPatient) {\n        throw new Error('Paciente no encontrado');\n      }\n\n      return updatedPatient;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async remove(id: string) {\n    try {\n      if (!Types.ObjectId.isValid(id)) {\n        throw new BadRequestException(BadRequestErrorEnum.INVALID_ID);\n      }\n      const objectId = new Types.ObjectId(id);\n\n      const deletedPatient = await this.patientModel.findByIdAndUpdate(\n        objectId,\n        {\n          isDeleted: true,\n        },\n      );\n\n      if (deletedPatient?.isDeleted) {\n        return { message: 'El paciente ha sido eliminado.' };\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatientsSwagger.html":{"url":"classes/PatientsSwagger.html","title":"class - PatientsSwagger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatientsSwagger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/swagger/patients.swagger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                            \n                                    Static\n                                findAll\n                            \n                            \n                                    Static\n                                findOne\n                            \n                            \n                                    Static\n                                remove\n                            \n                            \n                                    Static\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create()\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/swagger/patients.swagger.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/swagger/patients.swagger.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne()\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/swagger/patients.swagger.ts:97\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove()\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/swagger/patients.swagger.ts:169\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update()\n                \n            \n\n\n                    \n                        \n                            Defined in src/patients/swagger/patients.swagger.ts:126\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { applyDecorators } from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { Patient } from '../entities/patient.entity';\nimport { CreatePatientDto } from '../dto/create-patient.dto';\nimport { UpdatePatientDto } from '../dto/update-patient.dto';\n\nexport class PatientsSwagger {\n  static create() {\n    return applyDecorators(\n      ApiOperation({ summary: 'Crear un nuevo paciente' }),\n      ApiBody({\n        type: CreatePatientDto,\n        description: 'Datos del paciente a crear',\n        examples: {\n          example: {\n            summary: 'Paciente ejemplo',\n            value: {\n              name: 'Juan Pérez',\n              age: 35,\n              symptoms: ['fiebre', 'tos', 'dolor de cabeza'],\n            },\n          },\n        },\n      }),\n      ApiResponse({\n        status: 201,\n        description: 'Paciente creado',\n        content: {\n          'application/json': {\n            examples: {\n              pacienteCreado: {\n                summary: 'Paciente creado con éxito',\n                value: {\n                  _id: '64ddf6a2b3e5c123456789ab',\n                  name: 'Juan Pérez',\n                  age: 35,\n                  symptoms: ['fiebre', 'tos', 'dolor de cabeza'],\n                  isDeleted: false,\n                  createdAt: '2025-08-18T18:00:00.000Z',\n                  updatedAt: '2025-08-18T18:00:00.000Z',\n                },\n              },\n            },\n          },\n        },\n      }),\n    );\n  }\n\n  static findAll() {\n    return applyDecorators(\n      ApiOperation({ summary: 'Obtener todos los pacientes paginados' }),\n      ApiQuery({ name: 'page', required: false, type: Number }),\n      ApiQuery({ name: 'limit', required: false, type: Number }),\n      ApiResponse({\n        status: 200,\n        description: 'Lista de pacientes',\n        content: {\n          'application/json': {\n            examples: {\n              listaPacientes: {\n                summary: 'Ejemplo de lista paginada',\n                value: [\n                  {\n                    _id: '64ddf6a2b3e5c123456789ab',\n                    name: 'Juan Pérez',\n                    age: 35,\n                    symptoms: ['fiebre', 'tos'],\n                    isDeleted: false,\n                    createdAt: '2025-08-18T18:00:00.000Z',\n                    updatedAt: '2025-08-18T18:00:00.000Z',\n                  },\n                  {\n                    _id: '64ddf6b7b3e5c123456789ac',\n                    name: 'Ana Gómez',\n                    age: 28,\n                    symptoms: ['cansancio'],\n                    isDeleted: false,\n                    createdAt: '2025-08-18T18:05:00.000Z',\n                    updatedAt: '2025-08-18T18:05:00.000Z',\n                  },\n                ],\n              },\n            },\n          },\n        },\n      }),\n    );\n  }\n\n  static findOne() {\n    return applyDecorators(\n      ApiOperation({ summary: 'Obtener un paciente por ID' }),\n      ApiParam({ name: 'id', description: 'ID del paciente' }),\n      ApiResponse({\n        status: 200,\n        description: 'Paciente encontrado',\n        content: {\n          'application/json': {\n            examples: {\n              paciente: {\n                summary: 'Paciente ejemplo',\n                value: {\n                  _id: '64ddf6a2b3e5c123456789ab',\n                  name: 'Juan Pérez',\n                  age: 35,\n                  symptoms: ['fiebre', 'tos'],\n                  isDeleted: false,\n                  createdAt: '2025-08-18T18:00:00.000Z',\n                  updatedAt: '2025-08-18T18:00:00.000Z',\n                },\n              },\n            },\n          },\n        },\n      }),\n    );\n  }\n\n  static update() {\n    return applyDecorators(\n      ApiOperation({ summary: 'Actualizar un paciente por ID' }),\n      ApiParam({ name: 'id', description: 'ID del paciente' }),\n      ApiBody({\n        type: UpdatePatientDto,\n        description: 'Datos del paciente a actualizar',\n        examples: {\n          example: {\n            summary: 'Actualización ejemplo',\n            value: {\n              name: 'Juan Pérez',\n              age: 36,\n              symptoms: ['tos', 'fatiga'],\n            },\n          },\n        },\n      }),\n      ApiResponse({\n        status: 200,\n        description: 'Paciente actualizado',\n        content: {\n          'application/json': {\n            examples: {\n              pacienteActualizado: {\n                summary: 'Paciente actualizado con éxito',\n                value: {\n                  _id: '64ddf6a2b3e5c123456789ab',\n                  name: 'Juan Pérez',\n                  age: 36,\n                  symptoms: ['tos', 'fatiga'],\n                  isDeleted: false,\n                  createdAt: '2025-08-18T18:00:00.000Z',\n                  updatedAt: '2025-08-18T18:30:00.000Z',\n                },\n              },\n            },\n          },\n        },\n      }),\n    );\n  }\n\n  static remove() {\n    return applyDecorators(\n      ApiOperation({ summary: 'Eliminar un paciente por ID' }),\n      ApiParam({ name: 'id', description: 'ID del paciente' }),\n      ApiResponse({\n        status: 200,\n        description: 'Paciente eliminado',\n        content: {\n          'application/json': {\n            examples: {\n              eliminado: {\n                summary: 'Paciente eliminado',\n                value: { message: 'El paciente ha sido eliminado.' },\n              },\n            },\n          },\n        },\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/interceptors/response.interceptor.ts:24\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\n\ninterface ApiResponse {\n  success: true;\n  message: string;\n  data: T;\n  metadata: {\n    path: string;\n    method: string;\n    timestamp: string;\n  };\n}\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const request = context.switchToHttp().getRequest();\n    const { url, method } = request;\n\n    return next.handle().pipe(\n      map((data: T) => ({\n        success: true,\n        message: (data as { message: string })?.message || 'Operación exitosa',\n        data: (data as { data: T })?.data ?? data,\n        metadata: {\n          path: url || '',\n          method: method?.toUpperCase() || 'UNKNOWN',\n          timestamp: new Date().toISOString(),\n        },\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePatientDto.html":{"url":"classes/UpdatePatientDto.html","title":"class - UpdatePatientDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePatientDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/patients/dto/update-patient.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePatientDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePatientDto } from './create-patient.dto';\n\nexport class UpdatePatientDto extends PartialType(CreatePatientDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/config.module.ts\n            \n            variable\n            environment_variable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/error.interceptor.ts\n            \n            injectable\n            ErrorInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/exception.interceptor.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/interfaces/error_response.interface.ts\n            \n            interface\n            CustomError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/interfaces/error_response.interface.ts\n            \n            interface\n            ErrorResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/interceptors/response.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/response.interceptor.ts\n            \n            interface\n            ApiResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/patients/dto/create-patient.dto.ts\n            \n            class\n            CreatePatientDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/patients/dto/update-patient.dto.ts\n            \n            class\n            UpdatePatientDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/patients/entities/patient.entity.ts\n            \n            class\n            Patient\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/patients/entities/patient.entity.ts\n            \n            variable\n            PatientSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/patients/patients.controller.ts\n            \n            controller\n            PatientsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/patients/patients.service.ts\n            \n            injectable\n            PatientsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/patients/swagger/patients.swagger.ts\n            \n            class\n            PatientsSwagger\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^11.0.3\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            class-validator : ^0.14.2\n        \n            moment-timezone : ^0.6.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BadRequestErrorEnum   (src/.../error.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enums/error.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        BadRequestErrorEnum\n                    \n                \n                        \n                            \n                                 INVALID_ID\n                            \n                        \n                        \n                            \n                                Value : El ID proporcionado no es válido\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n🏥 Patients API - NestJS\nAPI para manejar pacientes con NestJS, MongoDB y Swagger para documentación.\n\n📂 Estructura de ficheros\nExample :src/\n├─ patients/\n│ ├─ dto/\n│ │ ├─ create-patient.dto.ts\n│ │ └─ update-patient.dto.ts\n│ ├─ entities/\n│ │ └─ patient.entity.ts\n│ ├─ swagger/\n│ │ └─ patients.swagger.ts # Documentación Swagger separada\n│ ├─ patients.service.ts # Lógica de negocio\n│ └─ patients.controller.ts # Endpoints REST\n├─ app.module.ts # Módulo principal\n├─ main.ts # Punto de entrada\n⚡ Instalación\nClonar repositorio\nExample :git clone https://github.com/AlejandroGaGa/romiai.git\nPara iniciar\nEs importante recalcar que se encesitan variables de entorno para poder inciiar el proyecto\nExample :npm install\nnpm run start:dev📖 Acceso a la documentación Swagger\nSwagger está habilitado en:\nExample :http://localhost:4000/api\n\nDesde allí podrás:\nVer todos los endpoints /patients\nProbar crear, actualizar, eliminar pacientes\nVer ejemplos de request y response\nPaginación con page y limitDetalles técnicos\nNestJS como framework principal.\nMongoDB con Mongoose.\nSwagger para documentación y ejemplos de request/response.\nDTOs para validar y tipar la información de entrada.\nSoft delete usando isDeleted en pacientes.\nDocumentación Swagger separada para mantener el controller limpio.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MongoModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PatientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_PatientsModule\n\n\n\ncluster_PatientsModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nConfigModule \n\nConfigModule \n\nConfigModule  -->\n\nCommonModule->ConfigModule \n\n\n\n\n\nMongoModule \n\nMongoModule \n\nMongoModule  -->\n\nCommonModule->MongoModule \n\n\n\n\n\nPatientsModule\n\nPatientsModule\n\nAppModule -->\n\nPatientsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nCommonModule -->\n\nConfigModule->CommonModule\n\n\n\n\n\nMongoModule\n\nMongoModule\n\nCommonModule -->\n\nMongoModule->CommonModule\n\n\n\n\n\nPatientsService\n\nPatientsService\n\nPatientsModule -->\n\nPatientsService->PatientsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment_variable   (src/.../config.module.ts)\n                        \n                        \n                            PatientSchema   (src/.../patient.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/config.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment_variable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '.env.dev'\n                    \n                \n\n\n        \n    \n\n    src/patients/entities/patient.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PatientSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Patient)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
